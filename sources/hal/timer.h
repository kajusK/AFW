/*
 * Copyright (C) 2020 Jakub Kaderka
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * @file    hal/timer.h
 * @brief   Timer driver
 *
 * @addtogroup hal
 * @{
 */

#ifndef __HAL_TIMER_H
#define __HAL_TIMER_H

#include <types.h>

/** Timer channels */
typedef enum {
    TIMER_CH_1,
    TIMER_CH_2,
    TIMER_CH_3,
    TIMER_CH_4,
} timerd_ch_t;

/** Events generated by timer */
typedef enum {
    TIMER_EVENT_UPDATE,     /**< Counter update - usually over/underflow */
    TIMER_EVENT_CAPTURE,    /**< Input capture event */
    TIMER_EVENT_COMPARE,    /**< Output compare event */
} timerd_event_t;

/* Caputure edge detection type */
typedef enum {
    TIMER_EDGE_RISING,
    TIMER_EDGE_FALLING,
    TIMER_EDGE_BOTH
} timerd_edge_t;

/**
 * Callback type for timer events
 *
 * The callback is called from the interrupt context
 *
 * @param event     Event that occured
 * @param channel   Channel on which the event happened (for capture/compare)
 */
typedef void (*timerd_cb_t)(timerd_event_t event, timerd_ch_t channel);

/**
 * Enable the event interrupts
 *
 * @param device    Device ID (starts from 1)
 * @param event     Event that should be enabled
 * @param channel   Channel on which the event should be enabled (only for capture/compare)
 */
extern void Timerd_EnableEvent(uint8_t device, timerd_event_t event,
        timerd_ch_t channel);

/**
 * Disable the event interrupts
 *
 * @param device    Device ID (starts from 1)
 * @param event     Event that should be disable
 * @param channel   Channel on which the event should be disabled (only for capture/compare)
 */
extern void Timerd_DisableEvent(uint8_t device, timerd_event_t event,
        timerd_ch_t channel);

/**
 * Set timer prescaler
 *
 * @param device    Device ID (starts from 1)
 * @param prescaler Prescaler value to set
 */
extern void Timerd_SetPrescaler(uint8_t device, uint32_t prescaler);

/**
 * Get current timer frequency
 *
 * @param device    Device ID (starts from 1)
 * @return Frequency in Hz
 */
uint32_t Timerd_GetFrequency(uint8_t device);

/**
 * Set timer clock frequency
 * Calculates prescaler value from timer clock and required frequency
 *
 * @param device    Device ID (starts from 1)
 * @param freq_hz   Base timer clock frequency to set
 */
extern void Timerd_SetClockFreq(uint8_t device, uint32_t freq_hz);

/**
 * Set timer period
 *
 * The timer will overflow after reaching this value
 *
 * @param device    Device ID (starts from 1)
 * @param period    Timer period in ticks
 */
extern void Timerd_SetPeriod(uint8_t device, uint32_t period);

/**
 * Set the compare value
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Channel to set the compare for
 * @param value     Value of the compare register
 */
extern void Timerd_SetCompare(uint8_t device, timerd_ch_t channel,
        uint32_t value);

/**
 * Get the captured timer value
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Channel to get the compare from
 * @return Captured timer value on given channel
 */
extern uint32_t Timerd_GetCapture(uint8_t devide, timerd_ch_t channel);

/**
 * Set timer's counter value
 *
 * @param device    Device ID (starts from 1)
 * @param value     Counter value to set
 */
extern void Timerd_Set(uint8_t device, uint32_t value);

/**
 * Get timer counter value
 *
 * @param device    Device ID (starts from 1)
 * @return Timer's counter value
 */
extern uint32_t Timerd_Get(uint8_t device);

/**
 * (Re)start the timer
 *
 * @param device    Device ID (starts from 1)
 */
extern void Timerd_Start(uint8_t device);

/**
 * Stop the timer
 *
 * @param device    Device ID (starts from 1)
 */
extern void Timerd_Stop(uint8_t device);

/**
 * Set timer in one shot/continuous mode
 *
 * @param device    Device ID (starts from 1)
 * @param value     True for one shot, false for continuous mode
 */
extern void Timerd_SetOneShot(uint8_t device, bool value);

/**
 * Disable the timer compare output
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Channel to disable compare output for
 */
extern void Timerd_DisableCompare(uint8_t device, timerd_ch_t channel);

/**
 * Enable the timer compare output (not required for compare interrupt)
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Channel to set compare for (for interrupts and output signal)
 * @param invert    Invert the compare output on the MCUs pin
 */
extern void Timerd_EnableCompare(uint8_t device, timerd_ch_t channel,
        bool invert);

/**
 * Disable the timers capture functionality
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Channel disable capture on
 */
extern void Timerd_DisableCapture(uint8_t device, timerd_ch_t channel);

/**
 * Enable the timers capture functionality
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Channel to capture on
 * @param edge      Edge to run the capture event for
 */
extern void Timerd_EnableCapture(uint8_t device, timerd_ch_t channel,
        timerd_edge_t edge);

/**
 * Set duty of the PWM output
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Timer channel set PWM duty to
 * @param duty      PWM duty cycle, between 0 and timer period
 */
#define Timerd_SetPwmDuty(device, channel, duty) Timerd_SetCompare((device), (channel), (duty))

/**
 * Enable PWM output on selected channel
 *
 * The PWM period is given by the timer period, the duty can be set using
 * Timerd_SetPwmDuty
 *
 * @param device    Device ID (starts from 1)
 * @param channel   Timer channel to output PWM on
 * @param invert    Invert PWM output signal
 */
extern void Timerd_EnablePWM(uint8_t device, timerd_ch_t channel, bool invert);

/**
 * Register callback for timer events
 *
 * @param device    Device ID (starts from 1)
 * @param cb        Callback to be called upon event
 */
extern void Timerd_RegisterCb(uint8_t device, timerd_cb_t cb);

/**
 * Initialize timer in quadruple encoder mode
 *
 * Timer channel 1 and 2 are used as timer inputs, timer counts between
 * 0 and configured period value (with of a timer by default)
 *
 * @param device    Device ID (starts from 1)
 * @param invert    Invert direction of the counting
 */
extern void Timerd_InitEncoder(uint8_t device, bool invert);

/**
 * Initialize the timer
 *
 * The timer peripheral is started, the prescaler is set to 0, period
 * is set to max value. The timer is not started after init.
 *
 * @param device    Device ID (starts from 1)
 */
extern void Timerd_Init(uint8_t device);

#endif

/** @} */
