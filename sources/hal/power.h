/**
 * @file    hal/power.h
 * @brief   System power control
 */

#ifndef __HAL_POWER_H
#define __HAL_POWER_H

#include <types.h>

/** Reason of the system reset */
typedef enum {
    POWERD_RST_POR,         /**< Power on reset */
    POWERD_RST_NRST,        /**< NRST pin reset */
    POWERD_RST_WDG,         /**< Watchdog reset */
    POWERD_RST_SW,          /**< Reset requested by software */
    POWERD_RST_LOW_POWER,   /**< Low power management reset */
} powerd_rst_t;

/**
 * Configure debugging interface to work even in low-power modes
 *
 * It increases low-power mode consumption significantly, use only for
 * debugging purposes.
 *
 * Be aware that enabling debugging keeps system clock running even in stop
 * mode, therefore systick is still triggering interrupts if enabled, waking
 * up the MCU.
 */
extern void Powerd_EnableDebugging(void);

/**
 * Go to sleep mode
 *
 * Core clock halted, peripherals running, any interrupt processed by NVIC
 * will wake the core. Turn unneeded peripherals off to save power consumption.
 * Don't forget to disable the systick interrupt.
 */
extern void Powerd_Sleep(void);

/**
 * Go to sleep mode, wake up by event
 *
 * Events are generated by EXTI line in event mode.
 */
extern void Powerd_SleepEvent(void);

/**
 * Go to stop mode
 *
 * In stop mode, all peripherals except RTC are down. Wake up by EXTI interrupt.
 * No need to turn off peripherals selectively.
 *
 * WDG is not affected and still running if enabled before. Don't forget
 * to disable the ADC module before calling.
 *
 * RTC alarm flag and EXTI pending (EXTI_PR) lines must be cleared before
 * calling.
 */
extern void Powerd_Stop(void);

/**
 * Go to stop mode, wake by event only
 *
 * Wake up by EXTI line event
 */
extern void Powerd_StopEvent(void);

/**
 * Power off device (standby mode)
 *
 * Only backup registers are kept, HW reset, WKUP pin, watchdog or RTC alarm
 * can wake up the device (boots as if restarted). All IO pins are high
 * impedance during power off.
 */
extern void Powerd_Off(void);

/**
 * Reboot the MCU
 */
extern void Powerd_Reboot(void);

/**
 * Configure programmable voltage detector
 *
 * Check datasheet for corresponding voltage levels. E.g. for stm32f051:
 *   0 ~ 2,1 V
 *   1 ~ 2,2 V
 *   ...
 *   7 ~ 2,8 V
 *
 *   EXTI can be used to trigger interrupt, falling edge = voltage dropped
 *   below level, rising = voltage went back
 *
 * @param threshold     Threshold to trigger PVD on, 0-7.
 */
extern void Powerd_SetPVDThreshold(uint8_t threshold);

/**
 * Check if the MCU was in standby mode before powering on (clears the flag)
 */
extern bool Powerd_BootedFromStandby(void);

/**
 * Get reason of the system reset, flag is cleared after reading!
 *
 * @return type of the system reset
 */
extern powerd_rst_t Powerd_GetResetSource(void);

#endif
